# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "melsman/ubuntu_1404_i686_mlkit"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
      # Customize the amount of memory on the VM:
      vb.memory = "4096"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  config.push.define "atlas" do |push|
    push.app = "melsman/ubuntu_1404_i686_smlserver_psql"
  end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
     THEUSER=mael

     # install postgresql
     sudo apt-get -y install postgresql
     sudo apt-get -y install unixodbc unixodbc-dev odbc-postgresql

     # create a new user
     sudo useradd -d /home/$THEUSER -m $THEUSER

     sudo -u postgres psql -c "CREATE USER $THEUSER CREATEDB PASSWORD 'hi';"
     sudo -u $THEUSER createdb $THEUSER

     sudo cat > /etc/odbc.ini << _EOF_
[psql]
Description = PostgreSQL
Driver      = /usr/lib/i386-linux-gnu/odbc/psqlodbca.so
Database    = $THEUSER
Servername  = localhost
_EOF_

     sudo /etc/init.d/postgresql restart
   
     # install apache
     sudo apt-get -y install apache2
     sudo apt-get -y install apache2-threaded-dev

     # install SMLserver
     cd /home/$THEUSER
     rm -rf smlserver
     sudo -u $THEUSER git clone https://github.com/melsman/mlkit.git smlserver
     cd smlserver
     sudo -u $THEUSER git pull
     sudo -u $THEUSER ./autobuild
     sudo -u $THEUSER ./configure --with-compiler=mlkit --enable-SMLserver --with-apxs=`which apxs2` --enable-odbc
     sudo -u $THEUSER make smlserver
     sudo -u $THEUSER make smlserver_libs
     sudo make install_smlserver

     # configuring apache2 to work with SMLserver
     sudo cp /usr/local/lib/smlserver/lib/mod_sml.so /usr/lib/apache2/modules/
     sudo ln -sf /usr/local/lib/smlserver/lib/libsmlodbc.so /usr/lib/
     sudo echo "LoadModule sml_module /usr/lib/apache2/modules/mod_sml.so" > /etc/apache2/mods-available/sml.load
     sudo cat > /etc/apache2/mods-available/sml.conf << _EOF_
<IfModule mod_sml.c>
    <FilesMatch \\.sml$>
      SetHandler sml-module
    </FilesMatch>
    #AddHandler sml-module .sml
    SmlPrjId "web"
    SmlPath "/var/www/demo.org/www/"
    SmlInitScript "/var/www/demo.org/www/../web_sys/init.sml"
</IfModule>
_EOF_

     sudo cat > /etc/apache2/sites-available/sml.conf << _EOF_
<VirtualHost *:80>
  ServerName demo.org
  ErrorLog /var/www/demo.org/error.log
  CustomLog /var/www/demo.org/access.log combined
  ServerAdmin webmaster@demo.org
  DocumentRoot /var/www/demo.org/www
  <Directory /var/www/demo.org/>
    DirectoryIndex index.sml index.html
    Require all granted
    RewriteEngine On
    RewriteBase /rest/
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteRule . /rest/handler.sml [QSA,L]
  </Directory>
</VirtualHost>
_EOF_

     sudo a2enmod rewrite
     sudo a2enmod sml
     sudo a2dissite 000-default.conf
     sudo a2ensite sml

     sudo rm -rf /var/www
     sudo mkdir /var/www
     sudo mkdir /var/www/demo.org
     sudo cp -pa /usr/local/lib/smlserver/{www,web_sys,web_demo_lib} /var/www/demo.org/
     sudo touch /var/www/demo.org/error.log
     sudo touch /var/www/demo.org/access.log
     sudo chown -R $THEUSER.www-data /var/www/demo.org

     cd /var/www/demo.org/web_demo_lib/pgsql
     sudo -u $THEUSER psql -c "\\i all.sql"

     cd /var/www/demo.org/www
     sudo -u $THEUSER SMLSERVERC=smlserverc MSPCOMP=mspcomp make
     sudo service apache2 restart

  SHELL
end
